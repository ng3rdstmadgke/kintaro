---
# timecard-appを実行するサービスアカウント
apiVersion: v1
kind: ServiceAccount
metadata:
  name: timecard-app
  annotations:
    # terraformのoutputの app_role_arn に修正
    eks.amazonaws.com/role-arn: ApplicationRoleArn

---
# https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/deployment-v1/
apiVersion: apps/v1
kind: Deployment
metadata:
  name: timecard-app  # リソース名 (名前空間内で一意でなければならない)
spec:
  replicas: 2
  selector:
    matchLabels:
      # このラベルと一致する spec.template.metadata.labels を持つ Pod がレプリカセットの対象となる
      app: timecard-app
  template: # PodTemplateSpec: https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-template-v1/#PodTemplateSpec
    metadata:
      labels:
        app: timecard-app
    spec: # PodSpec: https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#PodSpec
      serviceAccountName: timecard-app  # appを実行するサービスアカウント
      containers: # Container: https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#Container
      - name: timecard-app
        image: kintaro/app
        command: [poetry", "run", "uvicorn", "app:app", "--workers", "2", "--host", "0.0.0.0", "--port", "8080"]
        env:
        - name: DYNAMO_TABLE_NAME  # ※ terraformのoutputの dynamodb_table_name に修正
          value: UsersTable
        - name: SECRET_NAME  # ※ terraformのoutputの secret_name に修正
          value: SecretName
        - name: APP_BUCKET
          value: BucketName
        - name: SQS_URL  # ※ terraformのoutputの app_sqs_url に修正
          value: JobQueueUrl
        imagePullPolicy: Always  # デプロイされるたびに常に最新のイメージを取得 (default)
        ports:
        - containerPort: 8080

---
# ALBからのトラフィックはNodePortを経由してPodに到達するため、NodePortを指定する
# NodePort:
#   NodePortはClusterIPに加えて、各ノードの指定されたポートを開放します。
#   https://www.ios-net.co.jp/blog/20230621-1179/#NodePort%E3%81%A8%E3%81%AF
apiVersion: v1
kind: Service
metadata:
  name: timecard-app # コンテナ間通信のためのホスト名となる
spec: # ServiceSpec: https://kubernetes.io/docs/reference/kubernetes-api/service-resources/service-v1/#ServiceSpec
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
  type: NodePort
  selector:
    # このセレクタにマッチするラベルキーと値を持つポッドにサービストラフィックをルーティングします。
    app: timecard-app

---
# Ingress: https://kubernetes.io/ja/docs/concepts/services-networking/ingress/
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress
  annotations:
    # 外部LB(internet-facing)にするか、内部LB(internal)にするか
    #   - https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.7/guide/ingress/annotations/#scheme
    #   - https://docs.aws.amazon.com/elasticloadbalancing/latest/userguide/how-elastic-load-balancing-works.html#load-balancer-scheme
    alb.ingress.kubernetes.io/scheme: internet-facing

    # Podへのトラフィックのルーティング方法を指定します。
    #   - https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.7/guide/ingress/annotations/#target-type
    #     - instance (default)
    #       ALBからのトラフィックはNodePortを経由してPodに到達する
    #     - ip
    #       ALBからのトラフィックを直接Pod IPにルーティングする
    alb.ingress.kubernetes.io/target-type: instance

    # LBにアタッチしたいセキュリティグループをidもしくはNameタグで指定します。
    #   - https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.7/guide/ingress/annotations/#security-groups
    alb.ingress.kubernetes.io/security-groups: kintaro-prd-AppAlb

    # このアノテーションは alb.ingress.kubernetes.io/security-groups でSGを指定した場合にのみ適用されます。
    # true に設定すると、コントローラはロードバランサに追加の共有バックエンドセキュリティグループをアタッチします。
    # このバックエンドセキュリティグループは Node/Pod セキュリティグループルールで使われます。
    #   - https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.7/guide/ingress/annotations/#manage-backend-security-group-rules
    alb.ingress.kubernetes.io/manage-backend-security-group-rules: "true"
spec:
  defaultBackend:  # Spec内で指定されているパスに一致しないようなリクエストのためのバックエンド
    service:
      name: timecard-app
      port:
        number: 8080
        
  ingressClassName: alb
  rules:
    - http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: timecard-app
              port:
                number: 8080