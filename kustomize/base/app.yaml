---
# timecard-appを実行するサービスアカウント
apiVersion: v1
kind: ServiceAccount
metadata:
  name: timecard-app
  annotations:
    # terraformのoutputの app_role_arn に修正
    eks.amazonaws.com/role-arn: ApplicationRoleArn

---
# https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/deployment-v1/
apiVersion: apps/v1
kind: Deployment
metadata:
  name: timecard-app  # リソース名 (名前空間内で一意でなければならない)
spec:
  selector:
    matchLabels:
      # このラベルと一致する spec.template.metadata.labels を持つ Pod がレプリカセットの対象となる
      app: timecard-app
  template: # PodTemplateSpec: https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-template-v1/#PodTemplateSpec
    metadata:
      labels:
        app: timecard-app
    spec: # PodSpec: https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#PodSpec
      serviceAccountName: timecard-app  # appを実行するサービスアカウント
      containers: # Container: https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#Container
      - name: timecard-app
        image: kintaro/app
        command: ["poetry", "run", "uvicorn", "app:app", "--workers", "2", "--host", "0.0.0.0", "--port", "8080"]
        env:
        - name: DYNAMO_TABLE_NAME  # ※ terraformのoutputの dynamodb_table_name に修正
          valueFrom:
            configMapKeyRef:
              name: timecard-env
              key: DYNAMO_TABLE_NAME
        - name: SECRET_NAME  # ※ terraformのoutputの secret_name に修正
          valueFrom:
            configMapKeyRef:
              name: timecard-env
              key: SECRET_NAME
        - name: APP_BUCKET
          valueFrom:
            configMapKeyRef:
              name: timecard-env
              key: APP_BUCKET
        - name: SQS_URL  # ※ terraformのoutputの app_sqs_url に修正
          valueFrom:
            configMapKeyRef:
              name: timecard-env
              key: SQS_URL
        imagePullPolicy: Always  # デプロイされるたびに常に最新のイメージを取得 (default)
        ports:
        - containerPort: 8080
        resources:
          limits:
            memory: 500Mi
            cpu: 500m  # 1000m = 1 core
          requests:
            memory: 500Mi
            cpu: 250m
      volumes:
        - name: env
          configMap:
            name: timecard-env
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: timecard-app-hpa
spec:  # https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/horizontal-pod-autoscaler-v2/#HorizontalPodAutoscalerSpec
  # スケール対象のリソースの種類と名前を指定
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: timecard-app
  minReplicas: 1
  maxReplicas: 5
  metrics:  # 必要なレプリカ数を決定するためのメトリクスのリスト
  - type: Resource  # ContainerResource, External, Object, Pods, Resource のいずれかを指定
    resource:  # type が Resource の場合の設定項目
      name: cpu  # メトリクス名。他にはmemoryが指定可能
      target:  # メトリクスの目標値。この目標値を維持すようにレプリカ数が調整される。
        type: Utilization  # Utilization(使用率), Value(値), AverageValue(平均値) のいずれかを指定
        averageUtilization: 80  # メトリクスの目標値(全ポッドの平均値(%))。 resourceメトリックソースタイプに対してのみ有効。

---
# ALBからのトラフィックはNodePort(ClusterIP)を経由してPodに到達するため、NodePortを指定する
# ClusterIP:
#   ClusterIPはクラスタ内のPodに対してのみアクセス可能な仮想IPアドレスを提供します。
#   https://www.ios-net.co.jp/blog/20230621-1179/#ClusterIP_%E3%81%A8%E3%81%AF
# NodePort:
#   NodePortはClusterIPに加えて、各ノードの指定されたポートを開放します。
#   https://www.ios-net.co.jp/blog/20230621-1179/#NodePort%E3%81%A8%E3%81%AF
apiVersion: v1
kind: Service
metadata:
  name: timecard-app # コンテナ間通信のためのホスト名となる
spec: # ServiceSpec: https://kubernetes.io/docs/reference/kubernetes-api/service-resources/service-v1/#ServiceSpec
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
  type: NodePort
  selector:
    # このセレクタにマッチするラベルキーと値を持つポッドにサービストラフィックをルーティングします。
    app: timecard-app

---
# Ingress | Kubernetes API Reference:
# https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.26/#ingress-v1-networking-k8s-io
# Ingress | AWS Load Balancer Controller:
# https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.4/
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: timecard-app-alb
  # Ingress annotations - AWS Load Balancer Controller
  # https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.4/guide/ingress/annotations/
  annotations:
    # Ingressが属するグループ名。同じグループを指定すると、同じALBにIngressが紐づけられます。 (デフォルトではどのグループにも属さない)
    alb.ingress.kubernetes.io/group.name: baseport-prd
    # 外部ALB (internet-facing | internal)
    # - internet-facing: インターネットに公開されるALB (kubernetes.io/role/elb=1 のタグが付与されているサブネットにALBが作成される)
    # - internal: VPC内部にのみ公開されるALB (kubernetes.io/role/internal-elb=1 のタグが付与されているサブネットにALBが作成される)
    alb.ingress.kubernetes.io/scheme: internet-facing
    # Podへのトラフィックのルーティング方法を指定
    # - instance (default): ALBからのトラフィックはNodePortを経由してPodに到達する
    # - ip: ALBからのトラフィックをClusterIPを利用して直接Podにルーティングする (EKS Fargateの場合は ip でなければならない)
    alb.ingress.kubernetes.io/target-type: instance
    # リスナーのポートにhttp:80とhttps:443を指定
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP":80},{"HTTPS":443}]'
    # すべてのHTTPリスナーをHTTPSにリダイレクトさせる設定
    alb.ingress.kubernetes.io/ssl-redirect: "443"
    # *.prd.baseport.net の証明書
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:ap-northeast-1:xxxxxxxxxxxx:certificate/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
    # すべてのCIDRからのトラフィックを許可
    # security-groups の指定がない場合、コントローラはinbound-cidrsとlisten-portsからのアクセスを許可するsgを自動的に作成する。
    # Node, Podのセキュリティグループは自動作成されたsgからのインバウンドトラフィックを許可するように変更される。
    alb.ingress.kubernetes.io/inbound-cidrs: 0.0.0.0/0

    # Custom attributes - Annotation | AWS Load Balancer Controller:
    # https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.4/guide/ingress/annotations/#custom-attributes
    alb.ingress.kubernetes.io/healthcheck-path: /api/healthcheck
spec:
  ingressClassName: alb
  rules:
    - host: kintaro.prd.baseport.net
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: timecard-app
                port:
                  number: 8080